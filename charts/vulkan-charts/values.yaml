nameOverride: vulkan
fullnameOverride: false

global:
  imagePullPolicy: IfNotPresent
  domain: vulkan.strawhatengineer.com
  email: ogunbiyioladapo33@gmail.com
  ingress:
    className: nginx
  imageRegistry: ghcr.io/mofe6/vulkan         
  replicaCount: 1                             

# autoscaling config
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

# vulkan service account
serviceAccount:
  create: true
  name: vulkan-service-account
  annotations: {}
  automount: true

# vulkan ui
ui:
  replicas: 2
  image:
    repository: ghcr.io/mofe6/vulkan-ui
    tag: latest
    pullPolicy: IfNotPresent
  apiBase: "https://api.vulkan.strawhatengineer.com"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  ingress:
    enabled: true
    host: vulkan.strawhatengineer.com
    tlsSecret: vulkan-tls      # cert-manager will fill this
    annotations:  # extra NGINX tweaks (optional)             
      nginx.ingress.kubernetes.io/proxy-body-size: "25m"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
  # env is in list form
  env:
    - name: VITE_OIDC_ISSUER
      value: "https://dex.{{ .Values.global.domain }}/dex"
    - name: VITE_OIDC_CLIENT_ID
      value: "vulkan-ui"
    # the UI’s redirect URI must match what we put in staticClients
    - name: VITE_OIDC_REDIRECT_URI
      value: "https://vulkan.{{ .Values.global.domain }}/callback"
    - name: VITE_VULKAN_API_BASE
      value: "https://api.vulkan.strawhatengineer.com"
    # auth url is ideally used to redirect the user to the auth page (login page)
    # however newer oidc clients typically use the issuer url to perform a discovery process
    # and get the auth url from the issuer url as well as other oidc endpoints.
    # so i dont think this is needed, but i'll leave it here for now.
    - name: VITE_VULKAN_OIDC_AUTH_URL
      value: "https://dex.{{ .Values.global.domain }}/dex/auth"

# vulkan api
api:
  image:
    repository: ghcr.io/mofe6/vulkan-api
    tag: 0.1.0
    pullPolicy: IfNotPresent
  replicas: 3
  service:
    type: ClusterIP
    port: 8080
  env:
    - name: OIDCJWKSURL
      value: "https://dex.{{ .Values.global.domain }}/dex/keys"
    - name: K8S_IN_CLUSTER
      value: "true"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: vulkan-api-secrets
          key: databaseUrl
    - name: OPA_URL
      value: "http://127.0.0.1:8181"
    - name: OPA_POLICY_PATH
      value: "/data/api/authz/allow"
    - name: NATS_URL
      value: "nats://nats:4222"
    - name: OIDC_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: vulkan-dex-auth
          key: apiClientSecret
    - name: OIDC_ISSUER
      value: "https://dex.{{ .Values.global.domain }}/dex"
    - name: OIDC_CLIENT_ID
      value: "vulkan-api"
  ingress:
    enabled: true
    host: api.vulkan.strawhatengineer.com
    tlsSecret: vulkan-api-tls  # cert-manager will fill this
    annotations:               # extra NGINX tweaks
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
      # use ingres shim in cert manager to create the underlying Certificate resource,
      # and infer the dnsNames from your Ingress hosts and also use the secretName specified 
      # in your Ingress's TLS block. This way we don't have to manually create the Certificate resource.
      cert-manager.io/cluster-issuer: "letsencrypt-prod"


# vulkan cert-manager
certmanager: # alias in Chart.yaml
  enabled: true 
  installCRDs: true

# vulkan nginx
nginx:
  controller:
    publishService:
      enabled: true          # makes cloud LB get an external IP
    extraArgs:
      default-ssl-certificate: "vulkan/vulkan-tls"
    # service:
    #   annotations:           # example for AWS ELB idle timeout
    #     service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"




# ==================== Cross-chart overrides ====================
nats:                               # alias defined in Chart.yaml
  nats:
    jetstream:
      enabled: true                 # turn on persistence & streams
    auth:
      enabled: false                # disable auth for simplicity
    resources:
      limits:
        memory: 256Mi
  cluster:
    enabled: true
    replicas: 1

dex:
  enabled: true
  secretName: dex-auth
  apiClientSecret: null
  serviceAccount:
    create: true
    name: dex
  rbac:
    create: true
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    ingressClassName: nginx # Matches global.ingress.className
    hosts:
      - host: dex.{{ .Values.global.domain }}
        paths:
          - path: /dex
            pathType: Prefix
    tls:
      - hosts:
          - dex.{{ .Values.global.domain }}
        secretName: dex-tls
    # Optional: If Dex issuer (in the config block below) did NOT include `/dex`,
    # we might need `annotations: { nginx.ingress.kubernetes.io/rewrite-target: "/$2" }`
    # and `path: /dex(/|$)(.*)` but current config has `/dex` in the issuer.

  # config provided here will be copied directly into dex.yaml in the dex pod.
  config: |
    issuer: https://dex.{{ .Values.global.domain }}/dex
    storage:
      type: kubernetes
      config:
        inCluster: true

    staticClients:
      - id: vulkan-ui
        name: Vulkan UI
        public: true
        redirectURIs:
          - https://vulkan.{{ .Values.global.domain }}/callback
          

      - id: vulkan-api
        name: Vulkan API
        secret: {{ (index (lookup "v1" "Secret" .Release.Namespace "vulkan-dex-auth").data "apiClientSecret") | b64dec | quote }}
      
     
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: {{ (index (lookup "v1" "Secret" .Release.Namespace "vulkan-dex-auth").data "githubClientID") | b64dec | quote }}
        clientSecret: {{ (index (lookup "v1" "Secret" .Release.Namespace "vulkan-dex-auth").data "githubClientSecret") | b64dec | quote }}
        redirectURI: https://dex.{{ .Values.global.domain }}/dex/callback



# Tekton
tekton:

# Argo CD – Git-Ops engine
argocd:
  # Enable and configure the Argo CD API server ingress to expose the UI
  server:
    config:
      repositories: |
        - url: https://github.com/mofe64/vulkan-gitops.git
          type: git
          name: vulkan-gitops
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        nginx.ingress.kubernetes.io/proxy-body-size: "10m"
      ingressClassName: nginx
      hosts:
        # Use global domain to construct the Argo CD URL
        - argocd.vulkan.strawhatengineer.com
      # Cert-manager will use this secret to store the TLS certificate
      tls:
        - hosts:
            - argocd.vulkan.strawhatengineer.com
          secretName: argocd-server-tls # a unique secret name for Argo CD TLS

  applications:
    - name: vulkan-applications
      namespace: argocd
      project: default
      source:
        repoURL: https://github.com/mofe64/vulkan-gitops.git
        targetRevision: HEAD
        path: apps  # This folder will contain all your application manifests
      destination:
        server: https://kubernetes.default.svc
        namespace: default  # Default target namespace (apps can override this)
      syncPolicy:
        automated:
          prune: true
          selfHeal: true


# Crossplane – Cloud Resource Management
# crossplane:
#   # Core Crossplane controller
#   core:
#     enabled: true
#     resources:
#       requests:
#         cpu: "50m"
#         memory: "128Mi"
#       limits:
#         cpu: "250m"
#         memory: "256Mi"
  
#   # Providers (add as needed)
#   providers:
#     # Example: AWS provider
#     # aws:
#     #   enabled: false
#     #   version: "v0.37.1"
#     #   config:
#     #     aws_access_key_id: "YOUR_AWS_ACCESS_KEY"
#     #     aws_secret_access_key: "YOUR_AWS_SECRET_KEY"
#     #     aws_region: "us-west-2"