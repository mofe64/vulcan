nameOverride: vulkan
fullnameOverride: false

global:
  imagePullPolicy: IfNotPresent
  domain: vulkan.strawhatengineer.com
  email: ogunbiyioladapo33@gmail.com
  ingress:
    className: nginx
  vulkan:
    imageRegistry: ghcr.io/mofe64/vulkan         
                           
# autoscaling config
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# vulkan service account
serviceAccount:
  create: true
  name: vulkan-service-account
  annotations: {}
  automount: true

# vulkan ui
ui:
  replicas: 2
  image:
    repository: ghcr.io/mofe64/vulkan-ui
    tag: latest
    pullPolicy: IfNotPresent
  apiBase: "https://api.vulkan.strawhatengineer.com"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  ingress:
    enabled: true
    host: vulkan.strawhatengineer.com
    tlsSecret: vulkan-tls      # cert-manager will fill this
    annotations:  # extra NGINX tweaks (optional)             
      nginx.ingress.kubernetes.io/proxy-body-size: "25m"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
  # env is in list form
  env:
    - name: VITE_OIDC_ISSUER
      value: "https://dex.{{ .Values.global.domain }}/dex"
    - name: VITE_OIDC_CLIENT_ID
      value: "vulkan-ui"
    # the UI’s redirect URI must match what we put in staticClients
    - name: VITE_OIDC_REDIRECT_URI
      value: "https://vulkan.{{ .Values.global.domain }}/callback"
    - name: VITE_VULKAN_API_BASE
      value: "https://api.vulkan.strawhatengineer.com"
    # auth url is ideally used to redirect the user to the auth page (login page)
    # however newer oidc clients typically use the issuer url to perform a discovery process
    # and get the auth url from the issuer url as well as other oidc endpoints.
    # so i dont think this is needed, but i'll leave it here for now.
    - name: VITE_VULKAN_OIDC_AUTH_URL
      value: "https://dex.{{ .Values.global.domain }}/dex/auth"

# vulkan api
api:
  image:
    repository: ghcr.io/mofe64/vulkan-api
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 3
  service:
    type: ClusterIP
    port: 8080
  env:
    - name: OIDCJWKSURL
      value: "https://dex.{{ .Values.global.domain }}/dex/keys"
    - name: K8S_IN_CLUSTER
      value: "true"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: vulkan-api-secrets
          key: databaseUrl
    - name: OPA_URL
      value: "http://127.0.0.1:8181"
    - name: OPA_POLICY_PATH
      value: "/data/api/authz/allow"
    - name: NATS_URL
      value: "nats://nats:4222"
    - name: OIDC_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: vulkan-dex-auth
          key: apiClientSecret
    - name: OIDC_ISSUER
      value: "https://dex.{{ .Values.global.domain }}/dex"
    - name: OIDC_CLIENT_ID
      value: "vulkan-api"
  ingress:
    enabled: true
    host: api.vulkan.strawhatengineer.com
    tlsSecret: vulkan-api-tls  # cert-manager will fill this
    annotations:               # extra NGINX tweaks
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
      # use ingres shim in cert manager to create the underlying Certificate resource,
      # and infer the dnsNames from your Ingress hosts and also use the secretName specified 
      # in your Ingress's TLS block. This way we don't have to manually create the Certificate resource.
      cert-manager.io/cluster-issuer: "letsencrypt-prod"

# vulkan cert-manager
certmanager: # alias in Chart.yaml
  enable: true 
  installCRDs: true

# vulkan nginx
nginx:
  controller:
    publishService:
      # create nginx service as type load balancer
      enabled: true          # configure controller to allow for external ip access
    extraArgs:
      default-ssl-certificate: "vulkan/vulkan-tls"

# nats
nats:  # alias defined in Chart.yaml
  nats:
    jetstream:
      enabled: true                 # turn on persistence & streams
    auth:
      enabled: false                # disable auth for simplicity
    resources:
      limits:
        memory: 256Mi
  cluster:
    enabled: true
    replicas: 1

# dex
dex:
  enabled: true
  envVars:
    - name: VULKAN_API_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: vulkan-dex-auth
          key: apiClientSecret
    - name: GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: vulkan-dex-auth
          key: githubClientSecret
  serviceAccount:
    create: true
    name: dex
  rbac:
    create: true
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    ingressClassName: nginx # Matches global.ingress.className
    hosts:
      - host: dex.vulkan.strawhatengineer.com
        paths:
          - path: /dex
            pathType: Prefix
    tls:
      - hosts:
          - dex.vulkan.strawhatengineer.com
        secretName: dex-tls
    # Optional: If Dex issuer (in the config block below) did NOT include `/dex`,
    # we might need `annotations: { nginx.ingress.kubernetes.io/rewrite-target: "/$2" }`
    # and `path: /dex(/|$)(.*)` but current config has `/dex` in the issuer.

  # config provided here will be copied directly into dex.yaml in the dex pod.
  config:
    issuer: https://dex.vulkan.strawhatengineer.com/dex
    storage:
      type: kubernetes
      config:
        inCluster: true

    staticClients:
      - id: vulkan-ui
        name: Vulkan UI
        public: true
        redirectURIs:
          - https://vulkan.strawhatengineer.com/callback
          

      - id: vulkan-api
        name: Vulkan API
        secretEnv: VULKAN_API_CLIENT_SECRET
      
     
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: Iv23liZbERcZNq712NAw
        clientSecretEnv: GITHUB_CLIENT_SECRET
        redirectURI: https://dex.vulkan.strawhatengineer.com/dex/callback

# Tekton
tekton:
  enabled: true
  # The name of the ServiceAccount used by Tekton PipelineRuns.
  # This MUST match the `ServiceAccountName` set in the ApplicationReconciler.
  serviceAccountName: tekton-sa

# Argo CD – Git-Ops engine
argocd:
  # Enable and configure the Argo CD API server ingress to expose the UI
  server:
    config:
      repositories: |
        - url: https://github.com/mofe64/vulkan-gitops.git
          type: git
          name: vulkan-gitops
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        nginx.ingress.kubernetes.io/proxy-body-size: "10m"
      ingressClassName: nginx
      hosts:
        # Use global domain to construct the Argo CD URL
        - argocd.vulkan.strawhatengineer.com
      # Cert-manager will use this secret to store the TLS certificate
      tls:
        - hosts:
            - argocd.vulkan.strawhatengineer.com
          secretName: argocd-server-tls # a unique secret name for Argo CD TLS

  applications:
    - name: vulkan-applications
      namespace: argocd
      project: default
      source:
        repoURL: https://github.com/mofe64/vulkan-gitops.git
        targetRevision: HEAD
        path: apps  # This folder will contain all your application manifests
      destination:
        server: https://kubernetes.default.svc
        namespace: default  # Default target namespace (apps can override this)
      syncPolicy:
        automated:
          prune: true
          selfHeal: true

# vulkan operator
controllerManager:
  replicas: 1
  container:
    image:
      repository: ghcr.io/mofe64/vulkan-operator
      tag: latest
    args:
      - "--leader-elect"
      - "--metrics-bind-address=:8443"
      - "--health-probe-bind-address=:8081"
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 20
      httpGet:
        path: /healthz
        port: 8081
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      httpGet:
        path: /readyz
        port: 8081
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - "ALL"
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  terminationGracePeriodSeconds: 10
  serviceAccountName: operator-controller-manager

# RBAC for vulkan operator
rbac:
  enable: true

# CRDs for vulkan operator
crd:
  # This option determines whether the CRDs are included
  # in the installation process.
  enable: true

  # Enabling this option adds the "helm.sh/resource-policy": keep
  # annotation to the CRD, ensuring it remains installed even when
  # the Helm release is uninstalled.
  # NOTE: Removing the CRDs will also remove all cert-manager CR(s)
  # (Certificates, Issuers, ...) due to garbage collection.
  keep: true

# metrics for vulkan operator
# To disable metrics export set false, and ensure that the
# ControllerManager argument "--metrics-bind-address=:8443" is removed.
metrics:
  enable: true

# network policies for vulkan operator,
networkPolicy:
  enable: false

# Kube-Prometheus-Stack Configuration (aliased as 'prometheusoperator')
prometheusoperator: # This key matches the 'alias' in Chart.yaml
  enabled: true # Enable the sub-chart itself

  # Configuration specific to the Prometheus Operator controller
  prometheusOperator:
    enabled: true
    admissionWebhooks:
      enabled: true
    tls:
      enabled: true

  # Configuration for Prometheus server instance
  prometheus:
    enabled: true # Ensure Prometheus server deployment is enabled
    prometheusSpec:
      # Resource requests and limits for Prometheus pods
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 2000m
          memory: 4Gi
      # not suitable for production, but works for now
      emptyDir: {}
      # Data retention period
      # retention: 15d
      # Persistent storage configuration for Prometheus data (disabled for now)
      # storageSpec:
      #   volumeClaimTemplate:
      #     spec:
      #       storageClassName: standard # <<< IMPORTANT: REPLACE WITH YOUR ACTUAL STORAGECLASS NAME!
      #       resources:
      #         requests:
      #           storage: 50Gi # Allocate 50 GB for Prometheus data

      # ServiceMonitor and PodMonitor selectors
      # This 'release' label MUST match the 'release' label in your ServiceMonitor/PodMonitor definitions.
      # Since operator ServiceMonitor uses `release: {{ .Release.Name }}` 
      # and this sub-chart is aliased as 'prometheusoperator', this will correctly match.
      serviceMonitorSelector:
        matchLabels:
          release: prometheusoperator
      podMonitorSelector:
        matchLabels:
          release: prometheusoperator

  # Configuration for Alertmanager
  alertmanager:
    enabled: false # DISABLED

  # Configuration for Grafana
  grafana:
    enabled: true 

    # Set a strong admin password for Grafana (REQUIRED)
    adminPassword: your-secure-grafana-password 

    # Expose Grafana via Ingress
    ingress:
      enabled: true
      className: nginx 
      hosts:
        - grafana.vulkan.strawhatengineer.com
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod  
      tls: # Cert-manager will use this to create the TLS secret
        - secretName: grafana-vulkan-strawhatengineer-com-tls
          hosts:
            - grafana.vulkan.strawhatengineer.com

    persistence:
      enabled: false
      # type: pvc
      # storageClassName: standard # must match actual storage class name
      # size: 4Gi # Allocate 4 GB for Grafana data






# metallb for load balancer


# secrets placeholder for vulkan api
secrets:
  dex:
    apiClientSecret: ""
  github:
    clientID:     ""
    clientSecret: ""
  databaseUrl: ""
  dockerConfigJson: ""
  gitCredentials: ""


# Crossplane – Cloud Resource Management
# crossplane:
#   # Core Crossplane controller
#   core:
#     enabled: true
#     resources:
#       requests:
#         cpu: "50m"
#         memory: "128Mi"
#       limits:
#         cpu: "250m"
#         memory: "256Mi"
  
#   # Providers (add as needed)
#   providers:
#     # Example: AWS provider
#     # aws:
#     #   enabled: false
#     #   version: "v0.37.1"
#     #   config:
#     #     aws_access_key_id: "YOUR_AWS_ACCESS_KEY"
#     #     aws_secret_access_key: "YOUR_AWS_SECRET_KEY"
#     #     aws_region: "us-west-2"

