// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ClusterStatus.
const (
	Error        ClusterStatus = "error"
	Provisioning ClusterStatus = "provisioning"
	Ready        ClusterStatus = "ready"
)

// Defines values for ClusterType.
const (
	ClusterTypeAttached ClusterType = "attached"
	ClusterTypeEks      ClusterType = "eks"
)

// Defines values for CreateClusterType.
const (
	CreateClusterTypeAttached CreateClusterType = "attached"
	CreateClusterTypeEks      CreateClusterType = "eks"
)

// App defines model for App.
type App struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	ProjectId openapi_types.UUID `json:"project_id"`
	RepoUrl   string             `json:"repo_url"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	ProjectId openapi_types.UUID `json:"project_id"`
	Status    ClusterStatus      `json:"status"`
	Type      ClusterType        `json:"type"`
}

// ClusterStatus defines model for Cluster.Status.
type ClusterStatus string

// ClusterType defines model for Cluster.Type.
type ClusterType string

// CreateApp defines model for CreateApp.
type CreateApp struct {
	Name    string `json:"name"`
	RepoUrl string `json:"repo_url"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	// Kubeconfig base64-encoded kubeconfig
	Kubeconfig *string           `json:"kubeconfig"`
	Name       string            `json:"name"`
	Type       CreateClusterType `json:"type"`
}

// CreateClusterType defines model for CreateCluster.Type.
type CreateClusterType string

// CreateOrg defines model for CreateOrg.
type CreateOrg struct {
	Name string `json:"name"`
}

// CreateProject defines model for CreateProject.
type CreateProject struct {
	Name string `json:"name"`
}

// ListResponse defines model for ListResponse.
type ListResponse struct {
	Data       []ListResponse_Data_Item `json:"data"`
	NextCursor *string                  `json:"next_cursor"`
}

// ListResponse_Data_Item defines model for ListResponse.data.Item.
type ListResponse_Data_Item struct {
	union json.RawMessage
}

// Org defines model for Org.
type Org struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
}

// PatchName defines model for PatchName.
type PatchName struct {
	Name *string `json:"name,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt time.Time          `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	OrgId     openapi_types.UUID `json:"org_id"`
}

// SingleResponse defines model for SingleResponse.
type SingleResponse struct {
	Data SingleResponse_Data `json:"data"`
}

// SingleResponse_Data defines model for SingleResponse.Data.
type SingleResponse_Data struct {
	union json.RawMessage
}

// AppId defines model for AppId.
type AppId = openapi_types.UUID

// ClusterId defines model for ClusterId.
type ClusterId = openapi_types.UUID

// OrgId defines model for OrgId.
type OrgId = openapi_types.UUID

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// ProjectId defines model for ProjectId.
type ProjectId = openapi_types.UUID

// GetOrgsParams defines parameters for GetOrgs.
type GetOrgsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetOrgsOrgIdProjectsParams defines parameters for GetOrgsOrgIdProjects.
type GetOrgsOrgIdProjectsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetProjectsProjectIdAppsParams defines parameters for GetProjectsProjectIdApps.
type GetProjectsProjectIdAppsParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetProjectsProjectIdClustersParams defines parameters for GetProjectsProjectIdClusters.
type GetProjectsProjectIdClustersParams struct {
	Page    *Page    `form:"page,omitempty" json:"page,omitempty"`
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// PatchAppsAppIdJSONRequestBody defines body for PatchAppsAppId for application/json ContentType.
type PatchAppsAppIdJSONRequestBody = PatchName

// PostOrgsJSONRequestBody defines body for PostOrgs for application/json ContentType.
type PostOrgsJSONRequestBody = CreateOrg

// PatchOrgsOrgIdJSONRequestBody defines body for PatchOrgsOrgId for application/json ContentType.
type PatchOrgsOrgIdJSONRequestBody = PatchName

// PostOrgsOrgIdProjectsJSONRequestBody defines body for PostOrgsOrgIdProjects for application/json ContentType.
type PostOrgsOrgIdProjectsJSONRequestBody = CreateProject

// PatchProjectsProjectIdJSONRequestBody defines body for PatchProjectsProjectId for application/json ContentType.
type PatchProjectsProjectIdJSONRequestBody = PatchName

// PostProjectsProjectIdAppsJSONRequestBody defines body for PostProjectsProjectIdApps for application/json ContentType.
type PostProjectsProjectIdAppsJSONRequestBody = CreateApp

// PostProjectsProjectIdClustersJSONRequestBody defines body for PostProjectsProjectIdClusters for application/json ContentType.
type PostProjectsProjectIdClustersJSONRequestBody = CreateCluster

// AsOrg returns the union data inside the ListResponse_Data_Item as a Org
func (t ListResponse_Data_Item) AsOrg() (Org, error) {
	var body Org
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrg overwrites any union data inside the ListResponse_Data_Item as the provided Org
func (t *ListResponse_Data_Item) FromOrg(v Org) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrg performs a merge with any union data inside the ListResponse_Data_Item, using the provided Org
func (t *ListResponse_Data_Item) MergeOrg(v Org) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProject returns the union data inside the ListResponse_Data_Item as a Project
func (t ListResponse_Data_Item) AsProject() (Project, error) {
	var body Project
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProject overwrites any union data inside the ListResponse_Data_Item as the provided Project
func (t *ListResponse_Data_Item) FromProject(v Project) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProject performs a merge with any union data inside the ListResponse_Data_Item, using the provided Project
func (t *ListResponse_Data_Item) MergeProject(v Project) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApp returns the union data inside the ListResponse_Data_Item as a App
func (t ListResponse_Data_Item) AsApp() (App, error) {
	var body App
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApp overwrites any union data inside the ListResponse_Data_Item as the provided App
func (t *ListResponse_Data_Item) FromApp(v App) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApp performs a merge with any union data inside the ListResponse_Data_Item, using the provided App
func (t *ListResponse_Data_Item) MergeApp(v App) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCluster returns the union data inside the ListResponse_Data_Item as a Cluster
func (t ListResponse_Data_Item) AsCluster() (Cluster, error) {
	var body Cluster
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCluster overwrites any union data inside the ListResponse_Data_Item as the provided Cluster
func (t *ListResponse_Data_Item) FromCluster(v Cluster) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCluster performs a merge with any union data inside the ListResponse_Data_Item, using the provided Cluster
func (t *ListResponse_Data_Item) MergeCluster(v Cluster) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListResponse_Data_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListResponse_Data_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOrg returns the union data inside the SingleResponse_Data as a Org
func (t SingleResponse_Data) AsOrg() (Org, error) {
	var body Org
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrg overwrites any union data inside the SingleResponse_Data as the provided Org
func (t *SingleResponse_Data) FromOrg(v Org) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrg performs a merge with any union data inside the SingleResponse_Data, using the provided Org
func (t *SingleResponse_Data) MergeOrg(v Org) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProject returns the union data inside the SingleResponse_Data as a Project
func (t SingleResponse_Data) AsProject() (Project, error) {
	var body Project
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProject overwrites any union data inside the SingleResponse_Data as the provided Project
func (t *SingleResponse_Data) FromProject(v Project) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProject performs a merge with any union data inside the SingleResponse_Data, using the provided Project
func (t *SingleResponse_Data) MergeProject(v Project) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApp returns the union data inside the SingleResponse_Data as a App
func (t SingleResponse_Data) AsApp() (App, error) {
	var body App
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApp overwrites any union data inside the SingleResponse_Data as the provided App
func (t *SingleResponse_Data) FromApp(v App) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApp performs a merge with any union data inside the SingleResponse_Data, using the provided App
func (t *SingleResponse_Data) MergeApp(v App) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCluster returns the union data inside the SingleResponse_Data as a Cluster
func (t SingleResponse_Data) AsCluster() (Cluster, error) {
	var body Cluster
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCluster overwrites any union data inside the SingleResponse_Data as the provided Cluster
func (t *SingleResponse_Data) FromCluster(v Cluster) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCluster performs a merge with any union data inside the SingleResponse_Data, using the provided Cluster
func (t *SingleResponse_Data) MergeCluster(v Cluster) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SingleResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SingleResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete app
	// (DELETE /apps/{appId})
	DeleteAppsAppId(c *gin.Context, appId AppId)
	// Get app
	// (GET /apps/{appId})
	GetAppsAppId(c *gin.Context, appId AppId)
	// Rename app
	// (PATCH /apps/{appId})
	PatchAppsAppId(c *gin.Context, appId AppId)
	// Delete cluster
	// (DELETE /clusters/{clusterId})
	DeleteClustersClusterId(c *gin.Context, clusterId ClusterId)
	// Get cluster
	// (GET /clusters/{clusterId})
	GetClustersClusterId(c *gin.Context, clusterId ClusterId)
	// List organisations
	// (GET /orgs)
	GetOrgs(c *gin.Context, params GetOrgsParams)
	// Create an organisation
	// (POST /orgs)
	PostOrgs(c *gin.Context)
	// Delete org
	// (DELETE /orgs/{orgId})
	DeleteOrgsOrgId(c *gin.Context, orgId OrgId)
	// Get one org
	// (GET /orgs/{orgId})
	GetOrgsOrgId(c *gin.Context, orgId OrgId)
	// Rename org
	// (PATCH /orgs/{orgId})
	PatchOrgsOrgId(c *gin.Context, orgId OrgId)
	// List projects in org
	// (GET /orgs/{orgId}/projects)
	GetOrgsOrgIdProjects(c *gin.Context, orgId OrgId, params GetOrgsOrgIdProjectsParams)
	// Create project
	// (POST /orgs/{orgId}/projects)
	PostOrgsOrgIdProjects(c *gin.Context, orgId OrgId)
	// Delete project
	// (DELETE /projects/{projectId})
	DeleteProjectsProjectId(c *gin.Context, projectId ProjectId)
	// Get project
	// (GET /projects/{projectId})
	GetProjectsProjectId(c *gin.Context, projectId ProjectId)
	// Rename project
	// (PATCH /projects/{projectId})
	PatchProjectsProjectId(c *gin.Context, projectId ProjectId)
	// List apps in project
	// (GET /projects/{projectId}/apps)
	GetProjectsProjectIdApps(c *gin.Context, projectId ProjectId, params GetProjectsProjectIdAppsParams)
	// Create app
	// (POST /projects/{projectId}/apps)
	PostProjectsProjectIdApps(c *gin.Context, projectId ProjectId)
	// List clusters in project
	// (GET /projects/{projectId}/clusters)
	GetProjectsProjectIdClusters(c *gin.Context, projectId ProjectId, params GetProjectsProjectIdClustersParams)
	// Create or attach cluster
	// (POST /projects/{projectId}/clusters)
	PostProjectsProjectIdClusters(c *gin.Context, projectId ProjectId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteAppsAppId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAppsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId AppId

	err = runtime.BindStyledParameterWithOptions("simple", "appId", c.Param("appId"), &appId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAppsAppId(c, appId)
}

// GetAppsAppId operation middleware
func (siw *ServerInterfaceWrapper) GetAppsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId AppId

	err = runtime.BindStyledParameterWithOptions("simple", "appId", c.Param("appId"), &appId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAppsAppId(c, appId)
}

// PatchAppsAppId operation middleware
func (siw *ServerInterfaceWrapper) PatchAppsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId AppId

	err = runtime.BindStyledParameterWithOptions("simple", "appId", c.Param("appId"), &appId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchAppsAppId(c, appId)
}

// DeleteClustersClusterId operation middleware
func (siw *ServerInterfaceWrapper) DeleteClustersClusterId(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteClustersClusterId(c, clusterId)
}

// GetClustersClusterId operation middleware
func (siw *ServerInterfaceWrapper) GetClustersClusterId(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterId

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClustersClusterId(c, clusterId)
}

// GetOrgs operation middleware
func (siw *ServerInterfaceWrapper) GetOrgs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrgsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrgs(c, params)
}

// PostOrgs operation middleware
func (siw *ServerInterfaceWrapper) PostOrgs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOrgs(c)
}

// DeleteOrgsOrgId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrgsOrgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId OrgId

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", c.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orgId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrgsOrgId(c, orgId)
}

// GetOrgsOrgId operation middleware
func (siw *ServerInterfaceWrapper) GetOrgsOrgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId OrgId

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", c.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orgId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrgsOrgId(c, orgId)
}

// PatchOrgsOrgId operation middleware
func (siw *ServerInterfaceWrapper) PatchOrgsOrgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId OrgId

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", c.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orgId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchOrgsOrgId(c, orgId)
}

// GetOrgsOrgIdProjects operation middleware
func (siw *ServerInterfaceWrapper) GetOrgsOrgIdProjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId OrgId

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", c.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orgId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrgsOrgIdProjectsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrgsOrgIdProjects(c, orgId, params)
}

// PostOrgsOrgIdProjects operation middleware
func (siw *ServerInterfaceWrapper) PostOrgsOrgIdProjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "orgId" -------------
	var orgId OrgId

	err = runtime.BindStyledParameterWithOptions("simple", "orgId", c.Param("orgId"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orgId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOrgsOrgIdProjects(c, orgId)
}

// DeleteProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsProjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProjectsProjectId(c, projectId)
}

// GetProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectsProjectId(c, projectId)
}

// PatchProjectsProjectId operation middleware
func (siw *ServerInterfaceWrapper) PatchProjectsProjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchProjectsProjectId(c, projectId)
}

// GetProjectsProjectIdApps operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdApps(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsProjectIdAppsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectsProjectIdApps(c, projectId, params)
}

// PostProjectsProjectIdApps operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsProjectIdApps(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProjectsProjectIdApps(c, projectId)
}

// GetProjectsProjectIdClusters operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsProjectIdClusters(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsProjectIdClustersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter per_page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectsProjectIdClusters(c, projectId, params)
}

// PostProjectsProjectIdClusters operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsProjectIdClusters(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProjectsProjectIdClusters(c, projectId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/apps/:appId", wrapper.DeleteAppsAppId)
	router.GET(options.BaseURL+"/apps/:appId", wrapper.GetAppsAppId)
	router.PATCH(options.BaseURL+"/apps/:appId", wrapper.PatchAppsAppId)
	router.DELETE(options.BaseURL+"/clusters/:clusterId", wrapper.DeleteClustersClusterId)
	router.GET(options.BaseURL+"/clusters/:clusterId", wrapper.GetClustersClusterId)
	router.GET(options.BaseURL+"/orgs", wrapper.GetOrgs)
	router.POST(options.BaseURL+"/orgs", wrapper.PostOrgs)
	router.DELETE(options.BaseURL+"/orgs/:orgId", wrapper.DeleteOrgsOrgId)
	router.GET(options.BaseURL+"/orgs/:orgId", wrapper.GetOrgsOrgId)
	router.PATCH(options.BaseURL+"/orgs/:orgId", wrapper.PatchOrgsOrgId)
	router.GET(options.BaseURL+"/orgs/:orgId/projects", wrapper.GetOrgsOrgIdProjects)
	router.POST(options.BaseURL+"/orgs/:orgId/projects", wrapper.PostOrgsOrgIdProjects)
	router.DELETE(options.BaseURL+"/projects/:projectId", wrapper.DeleteProjectsProjectId)
	router.GET(options.BaseURL+"/projects/:projectId", wrapper.GetProjectsProjectId)
	router.PATCH(options.BaseURL+"/projects/:projectId", wrapper.PatchProjectsProjectId)
	router.GET(options.BaseURL+"/projects/:projectId/apps", wrapper.GetProjectsProjectIdApps)
	router.POST(options.BaseURL+"/projects/:projectId/apps", wrapper.PostProjectsProjectIdApps)
	router.GET(options.BaseURL+"/projects/:projectId/clusters", wrapper.GetProjectsProjectIdClusters)
	router.POST(options.BaseURL+"/projects/:projectId/clusters", wrapper.PostProjectsProjectIdClusters)
}
